# Example DB4Sci configuration file
#
# To configure DB4Sci, copy this file and name it local_cnf.py
#
# Every variable needs to be defined, there are no default values. The BaseConfig 
# should be the only section that you need to define.  Dev and Test sections are 
# useful for code development but nessisary for production systems.  
#
# This module is imported not read. This file needs to follow Python syntax
# rules. 
#
import os
import sys

class BaseConfig():
    # Port range to database connections begins at <base_port>
    base_port = 32010

    # container_host use output from uname -n
    container_host = os.environ.get('DB4SCI_HOST')
    container_ip = os.environ.get('DB4SCI_IP')

    # ISID of admin users, Admin uses can view/edit meta data
    admins = ['demo', 'admin1', 'admin2', 'admin3']
    backup_admin_mail = ['backupadmin@yourOrganization.org']

    # eMail stuff
    MAIL_FROM = "HPC_staff@yourOrganization.org"
    MAIL_TO = ["admins@yourOrganization.org"]
    MAIL_SERVER = "smtp.yourOrganization.org"

    # Time Zone
    TZ = 'America/Los_Angeles'

    # AWS CLI
    aws = '/usr/local/bin/aws'

    # Local Active Directory servers and Domain
    # DCs = ['dc10.yourDomain.org', 'dc20.yourDomain.org']
    DCs = ['dc1.yourdomain.org','dc2.yourdomain.org']
    AD_domain = '@yourDomain.org'


    # Data Volumes for Databases
    # Configures the UI for selecting a volume which is used to host database
    # Storage. Initally this was a single volume. But uses came up for encrypted
    # volumes and sperate volume which can be used by system admin staff.
    #
    # <data_volumes> is a list of lists. Minimual configuration is a single
    # volume "Standard". "Standard" can be used for all databases by everybody.
    #  
    # col[0] = 'Lable' displayed in UI
    # col[1] = Volume path 
    # col[l] = List of databases that can use the volume. 'ALL' can be used,
    #          or a list of Database types can be secified. 
    #          Database types are the keys from <info> dict:
    #          ['Postgres', 'MongoDB', 'MariaDB', 'Neo4j']
    # col[3] = List of uses authorized to use the volume.  
    data_volumes = [['Standard',  '/mydb/db_data', ['ALL'], ['ALL']],
                    ['Admin',     '/mydb/admin_vol', ['Postgres'], ['Admin', 'dbUser']],
                    ['Encrypted', '/mydb/encrypted/', ['Postgres'], ['hippaAdmin']],
                    ['Example',   '/dev/null', ['ALL'], ['nobody']],
                    ]

    backupvol = '/mydb/db_backups'

    #
    # SECRETS
    #
    # For every type of database and for every database created by users
    # a privelged admin account is created. The account is used to
    # perform backups. Account names can be particular to the database
    # containter, don't change 'admin', just the admin_pass.
    # 
    accounts = {'Postgres': {'admin': 'pgdba',
                             'admin_pass': 'pgSecret'},
                'MongoDB': {'admin': 'dbaas', 'admin_pass': 'mongoSecret'},
                'MariaDB': {'admin': 'root', 'admin_pass': 'mariaSecret'},
                'Neo4j':   {'admin': 'neo4j', 'admin_pass': 'neoSecret'},
                # DB4Sci uses a database to maintain history and state of the application
                # set a username/password for the application database admin account.
                'admindb': {'admin': 'db4sci',
                            'admin_pass': 'admSecret',
                            'contact': 'admin@yourDomain.org',
                            'owner': 'Your Name'},
                # Define a user information used by test scripts
                'test_user': {'admin': 'tester',
                              'admin_pass': 'testSecret',
                              'contact': 'dev_gal@yourDomain.org',
                              'owner': 'Your Name'}
                }

    
    # Default admin db instance name and port number
    # These do not need to change
    admindb_name = 'mydb_admin'
    admin_port = str(base_port - 1)
    admindb_user = accounts['admindb']['admin']
    admindb_password = accounts['admindb']['admin_pass']

    # URI for admin database
    SQLALCHEMY_DATABASE_URI = "postgresql://" + admindb_user + ":"
    SQLALCHEMY_DATABASE_URI += admindb_password + "@"
    SQLALCHEMY_DATABASE_URI += container_host + ":" + admin_port + "/"
    SQLALCHEMY_DATABASE_URI += admindb_name

    # AWS bucket for backups
    bucket = "s3://yourOrg-DB4Sci-backups/prod"

    # images: List of Docker Images
    # first column is 'Display Name'
    # second column is 'image name'
    # firt row of image is default
    info = {'Postgres': {'pub_ports': [5432],
                         'backupdir': '/var/lib/postgresql/backup',
                         'volumes': [
                                ['DBVOL', '/', '/var/lib/postgresql/data'],
                                [backupvol, '/', '/var/lib/postgresql/backup'],
                             ],
                         'command': 'postgres',
                         'dbengine': 'Postgres',
                         'images': [
                                 ['PostgreSQL 9.6.10', 'postgres:9.6.12'],
                                 ['PostgreSQL 10.7', 'postgres:10.7'],
                              ]},
            'MongoDB': {'pub_ports': [27017],
                        'backupdir': '/var/backup',
                        'volumes': [
                            ['DBVOL', '/db', '/data/db'],
                            ['DBVOL', '/configdb', '/data/configdb'],
                            [backupvol, '/', '/var/backup'],
                        ],
                        'command': 'mongod',
                        'dbengine': 'MongoDB',
                        'images': [
                             ['MongoDB 4.1.9', 'mongo:4.1.9'],
                        ]},
            'MariaDB': {'pub_ports': [3306],
                        'volumes': [
                                ['DBVOL', '/data', '/var/lib/mysql'],
                                ['DBVOL', '/keys', '/etc/mysql/keys'],
                                ['DBVOL', '/conf.d/encrypt.cnf', '/etc/mysql/conf.d/encrypt.cnf'],
                                [backupvol, '/', '/var/backup'],
                        ],
                        'command': 'mysqld',
                        'dbengine': 'MariaDB',
                        'images': [
                                 ['MariaDB 10.4', 'mariadb:10.4'],
                            ]},
            'Neo4j': {'pub_ports': [7473, 7687],  #7473:HTTPS  7687:Bolt
                      'backupdir': '/backup',
                      'volumes': [
                                ['DBVOL', '/data', '/data'],
                                ['DBVOL', '/logs', '/logs'],
                                [backupvol, '/', '/backup'],
                            ],
                      'command': 'neo4j',
                      'dbengine': 'Neo4j',
                      'images': [
                                 ['Neo4j 3.2.1', 'neo4j:3.2.1'],
                            ],
                      # <archive> a list of files to ADD to the container
                      # format: list of tuples (source_file, dest_file)
                      'archive': [('/ssl/yourOrganization.pem.crt', '/var/lib/neo4j/certificates/neo4j.cert'),
                                      ('/ssl/yourOrganization.org.key', '/var/lib/neo4j/certificates/neo4j.key'),
                                      ]
                      },
            }

class ProdConfig(BaseConfig):
    def __init__(self, mode):
        BaseConfig()
        self.mode = mode 


class DevConfig(BaseConfig):
    def __init__(self, mode):
        self.mode = mode 

    # Mail stuff
    MAIL_FROM = "valid_user@yourDomain.org"
    MAIL_TO = ["developer@yourDomain.org"]
    MAIL_SERVER = "smtp.yourDomain.org"
    # AWS stuff
    bucket = "s3://yourOrg-DB4Sci-backups/dev"


mode = os.environ.get('DB4SCI_MODE')
if mode == 'dev':
    Config = DevConfig(mode)
elif mode == 'prod' or mode == 'demo':
    Config = ProdConfig(mode)
elif mode == 'test':
    Config = TestConfig(mode)
else:
    print('Error: The environment varaible DB4SCI_MODE must be set to one of'),
    print("these values: ['prod', 'dev', 'test', 'demo']")
    sys.exit(1)
